name: pai_smart

services:
  mysql:
    container_name: mysql
    image: mysql:8
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: PaiSmart2025
    volumes:
      - mysql-data:/var/lib/mysql
      - /data/docker/mysql/conf:/etc/mysql/conf.d
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1
    healthcheck:
      start_period: 5s
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 5

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    restart: always
    ports:
      - "19000:19000"
      - "19001:19001"
    volumes:
      - minio-data:/data
      - /data/docker/minio/config:/root/.minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: PaiSmart2025
    command: server /data --console-address ":19001" -address ":19000"

  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - /data/docker/redis:/logs
    healthcheck:
      start_period: 5s
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: redis-server --bind 0.0.0.0 --port 6379 --requirepass PaiSmart2025 --appendonly yes

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@localhost:9093

      # 监听器配置
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT

    volumes:
      - kafka-data:/bitnami/kafka
    command:
      - sh
      - -c
      - |
        # 启动 Kafka（使用 bitnami 完整初始化流程）
        /opt/bitnami/scripts/kafka/run.sh &

        # 等待 Kafka 完全启动（更可靠的检测方式）
        echo "Waiting for Kafka to start..."
        while ! kafka-topics.sh --bootstrap-server localhost:9092 --list 2>/dev/null; do
          sleep 2
        done

        # 创建第一个主题（忽略已存在的错误）
        echo "Creating topic: file-processing"
        kafka-topics.sh --create \
          --bootstrap-server localhost:9092 \
          --replication-factor 1 \
          --partitions 1 \
          --topic file-processing 2>/dev/null || true

        # 创建第二个主题 vectorization
        echo "Creating topic: vectorization"
        kafka-topics.sh --create \
          --bootstrap-server localhost:9092 \
          --replication-factor 1 \
          --partitions 1 \
          --topic vectorization 2>/dev/null || true
        # 保持容器运行
        tail -f /dev/null
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  es:
    image: elasticsearch:8.10.4
    container_name: es
    restart: always
    ports:
      - 9200:9200
    volumes:
      - es-data:/usr/share/elasticsearch/data
    environment:
      - ELASTIC_PASSWORD=PaiSmart2025
      - node.name=pai-smart-es01
      - discovery.type=single-node
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - cluster.name=pai-smart-es-cluster

      # 内存配置 (根据可用RAM调整)
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    deploy:
      resources:
        limits:
          memory: 2g
    command: >
      bash -c "
      if ! elasticsearch-plugin list | grep -q 'analysis-ik'; then
        echo 'Installing analysis-ik plugin...';
        elasticsearch-plugin install --batch http://cdn-us-west-release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.10.4.zip;
      else
        echo 'analysis-ik plugin already installed.';
      fi;
      /usr/local/bin/docker-entrypoint.sh
      "
    healthcheck:
      test: [ 'CMD', 'curl', '-s', 'http://localhost:9200/_cluster/health?pretty' ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis-data:
  mysql-data:
  minio-data:
  kafka-data:
  es-data:
